-a^2 in {1, 2, 3} |> f

a, b = x(...) not in [1, 3], 2

d = (tb.x.y ...) not in [1, 3]

has = "foo" in { "bar", "foo" }

if a in {1} and b in {2, 3, 4} or c in [1, 10]
	print a, b, c

switch val
	when 1, 2, 3
		print "1, 2, 3"

	when not in (0, 100]
		print "not (0 < val <= 100)"

	when in [200, 300)
		print "200 <= val < 300)"

	when not in {333, 444, 555}
		print "not 333, 444 or 555"

do return y not in (a, b)

do
	exist = item in list
	check item in list

do
	item = get!
	exist = item in list
	check item in list

do
	item = get!
	list = {1, 2, 3}
	not_exist = item not in list
	check item in list
	check item in {1, 2, 3}
	check item(...) in {[1]: 1, [2]: 2, [3]: 3}

do
	check -> x in tb
	check -> x not in tb
	local x, tb
	check -> return x in tb
	check -> x not in tb

nil

